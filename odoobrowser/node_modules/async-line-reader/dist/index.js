"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Allows async line-wise reading from a stream.
 */
var AsyncLineReader = /** @class */ (function () {
    /**
     * Creates a new AsyncLineReader instance.
     * @param stream The stream to read from.
     * @param separator The line separator.
     * @param bufferEncoding The encoding of the buffer, if the stream is a binary stream.
     */
    function AsyncLineReader(stream, separator, bufferEncoding) {
        var _this = this;
        if (separator === void 0) { separator = '\n'; }
        if (bufferEncoding === void 0) { bufferEncoding = 'utf-8'; }
        this.stream = stream;
        this.separator = separator;
        this.bufferEncoding = bufferEncoding;
        this.ended = false;
        this.internalBuffer = '';
        this.resolve = null;
        this.reject = null;
        this.stream.on('data', function (chunk) { return _this.onData(chunk); });
        this.stream.on('end', function () { return _this.onEnd(); });
        this.stream.on('error', function (err) { return _this.onError(err); });
    }
    /**
     * Checks the type of a chunk and converts it to a string.
     */
    AsyncLineReader.prototype.chunkToString = function (chunk) {
        if (typeof chunk === 'string') {
            return chunk;
        }
        if (chunk instanceof Buffer) {
            return chunk.toString(this.bufferEncoding);
        }
        throw new Error("Invalid buffer type: " + typeof chunk);
    };
    /**
     * Called on stream error.
     */
    AsyncLineReader.prototype.onError = function (err) {
        this.consumeError(err);
    };
    /**
     * Called on stream end.
     */
    AsyncLineReader.prototype.onEnd = function () {
        this.ended = true;
        this.tryNotifyWaiting();
    };
    /**
     * Called in case there is new data in the stream.
     */
    AsyncLineReader.prototype.onData = function (chunk) {
        var data = this.chunkToString(chunk);
        // Store the new data. This could be done faster.
        this.internalBuffer = this.internalBuffer + data;
        this.tryNotifyWaiting();
    };
    /**
     * Notifies a waiting promise chain, if any.
     */
    AsyncLineReader.prototype.tryNotifyWaiting = function () {
        if (this.resolve) {
            var line = this.readNextLineFromBuffer();
            // If the stream has ended, we might send a null. 
            if (line !== null || this.ended) {
                this.resolve(line);
                this.reject = null;
                this.resolve = null;
            }
        }
    };
    /**
     * Either rejects a waiting promise with the given error,
     * or stores it for later throwing.
     */
    AsyncLineReader.prototype.consumeError = function (error) {
        if (this.resolve) {
            this.reject(error);
            this.reject = null;
            this.resolve = null;
        }
        else {
            this.error = error;
        }
    };
    /**
     * Gets the next available line from the buffer. The line is removed from the buffer.
     *
     * Returns null when there is no data, regardless of the stream has ended or not.
     */
    AsyncLineReader.prototype.readNextLineFromBuffer = function () {
        var idx = this.internalBuffer.indexOf(this.separator);
        if (idx >= 0) {
            // There is at least one complete line in our buffer.
            var line = this.internalBuffer.substring(0, idx);
            // Update buffer, remove \n
            this.internalBuffer = this.internalBuffer.substring(idx + this.separator.length, this.internalBuffer.length);
            return line;
        }
        else if (this.ended) {
            if (this.internalBuffer === '') {
                return null;
            }
            // There is no complete line and the stream has ended.
            var line = this.internalBuffer;
            this.internalBuffer = '';
            return line;
        }
        else {
            // There is no complete line yet.
            return null;
        }
    };
    /**
     * Gets the next line from the stream.
     * Returns either a line, a promise that resolves
     * when the next line becomes available, or null,
     * if the stream has ended and was read completely.
     * This method throws if the underlying stream errors.
     */
    AsyncLineReader.prototype.readLine = function () {
        return __awaiter(this, void 0, void 0, function () {
            var err, line;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.error) {
                    err = this.error;
                    this.error = null;
                    throw err;
                }
                line = this.readNextLineFromBuffer();
                if (line !== null) {
                    // There is data available, return it.
                    return [2 /*return*/, line];
                }
                else if (this.ended) {
                    // Stream is over, return null.
                    return [2 /*return*/, null];
                }
                else {
                    // No data, but stream ongoing. Async read operation.
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            if (_this.resolve !== null) {
                                reject('Another promise chain is already waiting for the next line.');
                            }
                            else {
                                _this.resolve = resolve;
                                _this.reject = reject;
                            }
                        })];
                }
                return [2 /*return*/];
            });
        });
    };
    return AsyncLineReader;
}());
exports.AsyncLineReader = AsyncLineReader;
//# sourceMappingURL=index.js.map